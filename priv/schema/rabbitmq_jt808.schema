%% ----------------------------------------------------------------------------
%% RabbitMQ JT808 Adapter
%%
%% See https://github.com/rabbitmq/rabbitmq-jt808/blob/stable/README.md
%% for details
%% ----------------------------------------------------------------------------

%  {rabbitmq_jt808,
%   [%% Set the default user name and password. Will be used as the default login
%% if a connecting client provides no other login details.
%%
%% Please note that setting this will allow clients to connect without
%% authenticating!
%%
%% {default_user, <<"guest">>},
%% {default_pass, <<"guest">>},

{mapping, "jt808.default_user", "rabbitmq_jt808.default_user", [
    {datatype, string}
]}.

{mapping, "jt808.default_pass", "rabbitmq_jt808.default_pass", [
    {datatype, string}
]}.

{translation, "rabbitmq_jt808.default_user",
fun(Conf) ->
    list_to_binary(cuttlefish:conf_get("jt808.default_user", Conf))
end}.

{translation, "rabbitmq_jt808.default_pass",
fun(Conf) ->
    list_to_binary(cuttlefish:conf_get("jt808.default_pass", Conf))
end}.

%% Enable anonymous access. If this is set to false, clients MUST provide
%% login information in order to connect. See the default_user/default_pass
%% configuration elements for managing logins without authentication.
%%
%% {allow_anonymous, true},

{mapping, "jt808.allow_anonymous", "rabbitmq_jt808.allow_anonymous",
    [{datatype, {enum, [true, false]}}]}.

%% If you have multiple chosts, specify the one to which the
%% adapter connects.
%%
%% {vhost, <<"/">>},

{mapping, "jt808.vhost", "rabbitmq_jt808.vhost", [{datatype, string}]}.

{translation, "rabbitmq_jt808.vhost",
fun(Conf) ->
    list_to_binary(cuttlefish:conf_get("jt808.vhost", Conf))
end}.

%% Specify the exchange to which messages from JT808 clients are published.
%%
%% {exchange, <<"amq.topic">>},

{mapping, "jt808.exchange", "rabbitmq_jt808.exchange", [{datatype, string}]}.

{translation, "rabbitmq_jt808.exchange",
fun(Conf) ->
    list_to_binary(cuttlefish:conf_get("jt808.exchange", Conf))
end}.

%% Specify TTL (time to live) to control the lifetime of non-clean sessions.
%%
%% {subscription_ttl, 1800000},
{mapping, "jt808.subscription_ttl", "rabbitmq_jt808.subscription_ttl", [
    {datatype, [{enum, [undefined, infinity]}, integer]}
]}.

{translation, "rabbitmq_jt808.subscription_ttl",
fun(Conf) ->
    case cuttlefish:conf_get("jt808.subscription_ttl", Conf, undefined) of
        undefined -> undefined;
        infinity  -> undefined;
        Ms        -> Ms
    end
end}.

%% Set the prefetch count (governing the maximum number of unacknowledged
%% messages that will be delivered).
%%
%% {prefetch, 10},
{mapping, "jt808.prefetch", "rabbitmq_jt808.prefetch",
    [{datatype, integer}]}.


{mapping, "jt808.retained_message_store", "rabbitmq_jt808.retained_message_store",
    [{datatype, atom}]}.

{mapping, "jt808.retained_message_store_dets_sync_interval", "rabbitmq_jt808.retained_message_store_dets_sync_interval",
    [{datatype, integer}]}.

%% Whether or not to enable proxy protocol support.
%%
%% {proxy_protocol, false}

{mapping, "jt808.proxy_protocol", "rabbitmq_jt808.proxy_protocol",
    [{datatype, {enum, [true, false]}}]}.

%% TCP/SSL Configuration (as per the broker configuration).
%%
%% {tcp_listeners, [8898]},
%% {ssl_listeners, []},

{mapping, "jt808.listeners.tcp", "rabbitmq_jt808.tcp_listeners",[
    {datatype, {enum, [none]}}
]}.

{mapping, "jt808.listeners.tcp.$name", "rabbitmq_jt808.tcp_listeners",[
    {datatype, [integer, ip]}
]}.

{translation, "rabbitmq_jt808.tcp_listeners",
fun(Conf) ->
    case cuttlefish:conf_get("jt808.listeners.tcp", Conf, undefined) of
        none -> [];
        _ ->
            Settings = cuttlefish_variable:filter_by_prefix("jt808.listeners.tcp", Conf),
            [ V || {_, V} <- Settings ]
    end
end}.

{mapping, "jt808.listeners.ssl", "rabbitmq_jt808.ssl_listeners",[
    {datatype, {enum, [none]}}
]}.

{mapping, "jt808.listeners.ssl.$name", "rabbitmq_jt808.ssl_listeners",[
    {datatype, [integer, ip]}
]}.

{translation, "rabbitmq_jt808.ssl_listeners",
fun(Conf) ->
    case cuttlefish:conf_get("jt808.listeners.ssl", Conf, undefined) of
        none -> [];
        _ ->
            Settings = cuttlefish_variable:filter_by_prefix("jt808.listeners.ssl", Conf),
            [ V || {_, V} <- Settings ]
    end
end}.

%% Number of Erlang processes that will accept connections for the TCP
%% and SSL listeners.
%%
%% {num_tcp_acceptors, 10},
%% {num_ssl_acceptors, 1},

{mapping, "jt808.num_acceptors.ssl", "rabbitmq_jt808.num_ssl_acceptors", [
    {datatype, integer}
]}.

{mapping, "jt808.num_acceptors.tcp", "rabbitmq_jt808.num_tcp_acceptors", [
    {datatype, integer}
]}.

{mapping, "jt808.ssl_cert_login", "rabbitmq_jt808.ssl_cert_login", [
    {datatype, {enum, [true, false]}}]}.


%% TCP/Socket options (as per the broker configuration).
%%
%% {tcp_listen_options, [{backlog,   128},
%%                       {nodelay,   true}]}
%   ]},

%% TCP listener section ======================================================

{mapping, "jt808.tcp_listen_options", "rabbitmq_jt808.rabbit.tcp_listen_options", [
    {datatype, {enum, [none]}}]}.

{translation, "rabbitmq_jt808.rabbit.tcp_listen_options",
fun(Conf) ->
    case cuttlefish:conf_get("jt808.tcp_listen_options") of
        none -> [];
        _    -> cuttlefish:invalid("Invalid jt808.tcp_listen_options")
    end
end}.

{mapping, "jt808.tcp_listen_options.backlog", "rabbitmq_jt808.tcp_listen_options.backlog", [
    {datatype, integer}
]}.

{mapping, "jt808.tcp_listen_options.nodelay", "rabbitmq_jt808.tcp_listen_options.nodelay", [
    {datatype, {enum, [true, false]}}
]}.

{mapping, "jt808.tcp_listen_options.buffer", "rabbitmq_jt808.tcp_listen_options.buffer",
    [{datatype, integer}]}.

{mapping, "jt808.tcp_listen_options.delay_send", "rabbitmq_jt808.tcp_listen_options.delay_send",
    [{datatype, {enum, [true, false]}}]}.

{mapping, "jt808.tcp_listen_options.dontroute", "rabbitmq_jt808.tcp_listen_options.dontroute",
    [{datatype, {enum, [true, false]}}]}.

{mapping, "jt808.tcp_listen_options.exit_on_close", "rabbitmq_jt808.tcp_listen_options.exit_on_close",
    [{datatype, {enum, [true, false]}}]}.

{mapping, "jt808.tcp_listen_options.fd", "rabbitmq_jt808.tcp_listen_options.fd",
    [{datatype, integer}]}.

{mapping, "jt808.tcp_listen_options.high_msgq_watermark", "rabbitmq_jt808.tcp_listen_options.high_msgq_watermark",
    [{datatype, integer}]}.

{mapping, "jt808.tcp_listen_options.high_watermark", "rabbitmq_jt808.tcp_listen_options.high_watermark",
    [{datatype, integer}]}.

{mapping, "jt808.tcp_listen_options.keepalive", "rabbitmq_jt808.tcp_listen_options.keepalive",
    [{datatype, {enum, [true, false]}}]}.

{mapping, "jt808.tcp_listen_options.low_msgq_watermark", "rabbitmq_jt808.tcp_listen_options.low_msgq_watermark",
    [{datatype, integer}]}.

{mapping, "jt808.tcp_listen_options.low_watermark", "rabbitmq_jt808.tcp_listen_options.low_watermark",
    [{datatype, integer}]}.

{mapping, "jt808.tcp_listen_options.port", "rabbitmq_jt808.tcp_listen_options.port",
    [{datatype, integer}, {validators, ["port"]}]}.

{mapping, "jt808.tcp_listen_options.priority", "rabbitmq_jt808.tcp_listen_options.priority",
    [{datatype, integer}]}.

{mapping, "jt808.tcp_listen_options.recbuf", "rabbitmq_jt808.tcp_listen_options.recbuf",
    [{datatype, integer}]}.

{mapping, "jt808.tcp_listen_options.send_timeout", "rabbitmq_jt808.tcp_listen_options.send_timeout",
    [{datatype, integer}]}.

{mapping, "jt808.tcp_listen_options.send_timeout_close", "rabbitmq_jt808.tcp_listen_options.send_timeout_close",
    [{datatype, {enum, [true, false]}}]}.

{mapping, "jt808.tcp_listen_options.sndbuf", "rabbitmq_jt808.tcp_listen_options.sndbuf",
    [{datatype, integer}]}.

{mapping, "jt808.tcp_listen_options.tos", "rabbitmq_jt808.tcp_listen_options.tos",
    [{datatype, integer}]}.

{mapping, "jt808.tcp_listen_options.linger.on", "rabbitmq_jt808.tcp_listen_options.linger",
    [{datatype, {enum, [true, false]}}]}.

{mapping, "jt808.tcp_listen_options.linger.timeout", "rabbitmq_jt808.tcp_listen_options.linger",
    [{datatype, integer}, {validators, ["non_negative_integer"]}]}.

{translation, "rabbitmq_jt808.tcp_listen_options.linger",
fun(Conf) ->
    LingerOn = cuttlefish:conf_get("jt808.tcp_listen_options.linger.on", Conf, false),
    LingerTimeout = cuttlefish:conf_get("jt808.tcp_listen_options.linger.timeout", Conf, 0),
    {LingerOn, LingerTimeout}
end}.
